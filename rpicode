import requests
import json
import os
import time
import subprocess
from flask import Flask, request, jsonify
import threading

# ========== CONFIGURATION ==========
SERVER_IP = "192.168.1.15"
IMAGE_NAME = "photo.jpg"
CAPTURE_COMMAND = f"fswebcam -r 640x480 --no-banner {IMAGE_NAME}"
PORT = 5001  # Flask will run here

# ========== GPIO SETUP ==========
try:
    import RPi.GPIO as GPIO
    GPIO.setmode(GPIO.BCM)
    GREEN_LED = 18
    RED_LED = 23
    SERVO_PIN = 17
    GPIO.setup(GREEN_LED, GPIO.OUT)
    GPIO.setup(RED_LED, GPIO.OUT)
    GPIO.setup(SERVO_PIN, GPIO.OUT)
    servo = GPIO.PWM(SERVO_PIN, 50)
    servo.start(0)
except ImportError:
    print(" GPIO not available - running in test mode.")
    GPIO = None
    servo = None

# ========== ACTIONS ==========
def open_lid():
    if servo:
        servo.ChangeDutyCycle(7.5)
        time.sleep(1)
        servo.ChangeDutyCycle(0)

def close_lid():
    if servo:
        servo.ChangeDutyCycle(2.5)
        time.sleep(1)
        servo.ChangeDutyCycle(0)

def take_action(recyclable):
    if recyclable:
        print("Accepted recyclable item.")
        GPIO.output(GREEN_LED, GPIO.HIGH)
        GPIO.output(RED_LED, GPIO.LOW)
        open_lid()
    else:
        print("Rejected non-recyclable item.")
        GPIO.output(GREEN_LED, GPIO.LOW)
        GPIO.output(RED_LED, GPIO.HIGH)
       
        subprocess.run(["espeak", "This item is not accepted. Please use the correct bin."])

# ========== FLASK SERVER ==========
app = Flask(__name__)

@app.route('/trigger', methods=['POST'])
def trigger_from_arduino():
    print("ðŸ“¡ Trigger received from Arduino.")
    capture_image()
    result = send_image()
    if result and "recyclable" in result:
        take_action(result["recyclable"])
       
        if not result["recyclable"]:
            try:
                subprocess.run(["espeak","This item is not recyclable. Please use the other bin"], check=True)
            except Exception as e:
                print("TTS error", e)
       
        return jsonify({"status": "success"}), 200
    else:
        return jsonify({"status":"failed", "reason": "no valid classification"}), 500

# ========== IMAGE CAPTURE AND CLASSIFICATION ==========  
def capture_image():
    print("ðŸ“¸ Capturing image...")
    os.system(CAPTURE_COMMAND)

def send_image():
    try:
        with open(IMAGE_NAME, 'rb') as img:
            print("Sending image to laptop server...")
            response = requests.post(f"http://{SERVER_IP}:5000/upload", files={"image": img})
            return response.json()
    except Exception as e:
        print("Error sending image:", e)
        return None

# ========== START ==========
if __name__ == "__main__":
    try:
        app.run(host='0.0.0.0', port=PORT)
    finally:
        if servo:
            servo.stop()
        if GPIO:
            GPIO.cleanup()import requests
